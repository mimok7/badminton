import { Player, Match, Team } from '@/types';
import { getTeamFairnessScore, getTeamMatchScore, getTeamScore, jitter, reorderMatchesToAvoidConsecutive, MAX_TEAM_SCORE_DIFF } from './match-helpers';

const isMale = (p: Player) => (p.gender || '').toLowerCase() === 'm' || (p.gender || '').toLowerCase() === 'male' || (p.gender || '').toLowerCase() === 'man';
const isFemale = (p: Player) => (p.gender || '').toLowerCase() === 'f' || (p.gender || '').toLowerCase() === 'female' || (p.gender || '').toLowerCase() === 'woman' || (p.gender || '').toLowerCase() === 'w';

export function createMixedAndSameSexDoublesMatches(players: Player[], numberOfCourts: number, minGamesPerPlayer = 1): Match[] {
  if (!Array.isArray(players) || players.length < 4 || numberOfCourts <= 0) return [];

  const counts: Record<string, number> = {};
  players.forEach(p => { counts[p.id] = 0; });
  const result: Match[] = [];
  const totalPlayers = players.length;
  let targetMatches = Math.ceil((totalPlayers * minGamesPerPlayer) / 4);
  targetMatches = Math.max(targetMatches, Math.ceil(totalPlayers / 4));
  
  console.log(`üë´ ÌòºÌï©Î≥µÏãù Í≤ΩÍ∏∞ ÏÉùÏÑ± ÏãúÏûë: ${totalPlayers}Î™Ö, ÏµúÏÜå ${targetMatches}Í≤ΩÍ∏∞`);

  // helper: given 4 players, pick best-balanced pairing
  const bestBalancedPairs = (four: Player[]): { t1: Team; t2: Team } | null => {
    if (four.length !== 4) return null;
    const candidates: [Team, Team][] = [
      [ { player1: four[0], player2: four[1] }, { player1: four[2], player2: four[3] } ],
      [ { player1: four[0], player2: four[2] }, { player1: four[1], player2: four[3] } ],
      [ { player1: four[0], player2: four[3] }, { player1: four[1], player2: four[2] } ],
    ];
    let best: { t1: Team; t2: Team } | null = null;
    let bestDiff = Number.POSITIVE_INFINITY;
    for (const [a, b] of candidates) {
      const diff = Math.abs(getTeamScore(a) - getTeamScore(b));
      if (diff <= MAX_TEAM_SCORE_DIFF) { best = { t1: a, t2: b }; break; }
      if (diff < bestDiff) { bestDiff = diff; best = { t1: a, t2: b }; }
    }
    return best;
  };
  
  let attempts = 0;
  const maxAttempts = Math.max(100, players.length * minGamesPerPlayer * 10);
  const needsMore = () => players.some(p => counts[p.id] < minGamesPerPlayer);
  
  while (needsMore() && attempts < maxAttempts) {
    // prefer males/females who have lower counts
    const males = players.filter(isMale).sort((a, b) => counts[a.id] - counts[b.id]);
    const females = players.filter(isFemale).sort((a, b) => counts[a.id] - counts[b.id]);
    const unspecified = players.filter(p => !isMale(p) && !isFemale(p)).sort((a, b) => counts[a.id] - counts[b.id]);

    // ÎÇ®ÎÖÄ Î™®Îëê ÏóÜÏúºÎ©¥ Ï§ëÎã®
    if (males.length === 0 && females.length === 0) {
      console.warn('‚ö†Ô∏è ÌòºÌï©Î≥µÏãù: ÏÑ±Î≥Ñ Ï†ïÎ≥¥Í∞Ä ÏûàÎäî ÏÑ†ÏàòÍ∞Ä ÏóÜÏùå');
      break;
    }

    // ÌòºÎ≥µ Í∞ÄÎä•Ìïú Î™®Îì† ÌåÄ Ï°∞Ìï© ÏÉùÏÑ±
    const allCandidates: { team: Team; score: number; isMixed: boolean }[] = [];
    
    // ÌòºÎ≥µ ÌåÄ (ÎÇ®-Ïó¨)
    if (males.length > 0 && females.length > 0) {
      for (const m of males) {
        for (const f of females) {
          const t: Team = { player1: m, player2: f };
          allCandidates.push({ team: t, score: getTeamScore(t), isMixed: true });
        }
      }
    }
    
    // ÎØ∏ÏßÄÏ†ï + ÎÇ®ÏÑ±
    for (const u of unspecified) {
      for (const m of males) {
        const t: Team = { player1: u, player2: m };
        allCandidates.push({ team: t, score: getTeamScore(t), isMixed: false });
      }
    }
    
    // ÎØ∏ÏßÄÏ†ï + Ïó¨ÏÑ±
    for (const u of unspecified) {
      for (const f of females) {
        const t: Team = { player1: u, player2: f };
        allCandidates.push({ team: t, score: getTeamScore(t), isMixed: false });
      }
    }
    
    // Í∞ôÏùÄ ÏÑ±Î≥Ñ (ÎØ∏ÏßÄÏ†ï Ï†úÏô∏)
    for (let i = 0; i < males.length; i++) {
      for (let j = i + 1; j < males.length; j++) {
        const t: Team = { player1: males[i], player2: males[j] };
        allCandidates.push({ team: t, score: getTeamScore(t), isMixed: false });
      }
    }
    for (let i = 0; i < females.length; i++) {
      for (let j = i + 1; j < females.length; j++) {
        const t: Team = { player1: females[i], player2: females[j] };
        allCandidates.push({ team: t, score: getTeamScore(t), isMixed: false });
      }
    }
    
    // ÎØ∏ÏßÄÏ†ïÎÅºÎ¶¨
    for (let i = 0; i < unspecified.length; i++) {
      for (let j = i + 1; j < unspecified.length; j++) {
        const t: Team = { player1: unspecified[i], player2: unspecified[j] };
        allCandidates.push({ team: t, score: getTeamScore(t), isMixed: false });
      }
    }
    
    // Ï†êÏàòÎ°ú Ï†ïÎ†¨
    allCandidates.sort((a, b) => a.score - b.score);

    const matches: Match[] = [];
    const used = new Set<string>();

    for (let i = 0; i < allCandidates.length; i++) {
      const t1 = allCandidates[i];
      if (used.has(t1.team.player1.id) || used.has(t1.team.player2.id)) continue;

      // Ï†êÏàò Ï∞®Ïù¥ <= MAX_TEAM_SCORE_DIFFÏù∏ ÏÉÅÎåÄÌåÄ Ï∞æÍ∏∞
      let bestOpponent: { team: Team; diff: number } | null = null;

      for (let j = i + 1; j < allCandidates.length; j++) {
        const t2 = allCandidates[j];
        if (used.has(t2.team.player1.id) || used.has(t2.team.player2.id)) continue;
        if (t1.team.player1.id === t2.team.player1.id || t1.team.player1.id === t2.team.player2.id ||
            t1.team.player2.id === t2.team.player1.id || t1.team.player2.id === t2.team.player2.id) continue;

        const diff = Math.abs(t1.score - t2.score);
        
        // Ï†êÏàò Ï∞®Ïù¥Í∞Ä MAX_TEAM_SCORE_DIFF Ïù¥ÌïòÎ©¥ ÏµúÏ†Å ÌõÑÎ≥¥
        if (diff <= MAX_TEAM_SCORE_DIFF) {
          if (!bestOpponent || diff < bestOpponent.diff) {
            bestOpponent = { team: t2.team, diff };
          }
        }
      }

      // MAX_TEAM_SCORE_DIFF Ïù¥ÌïòÏùò ÏÉÅÎåÄÍ∞Ä ÏóÜÏúºÎ©¥ ÏµúÏÜå Ï∞®Ïù¥ ÏÉÅÎåÄ ÏÑ†ÌÉù
      if (!bestOpponent) {
        let minDiff = Number.POSITIVE_INFINITY;
        for (let j = i + 1; j < allCandidates.length; j++) {
          const t2 = allCandidates[j];
          if (used.has(t2.team.player1.id) || used.has(t2.team.player2.id)) continue;
          if (t1.team.player1.id === t2.team.player1.id || t1.team.player1.id === t2.team.player2.id ||
              t1.team.player2.id === t2.team.player1.id || t1.team.player2.id === t2.team.player2.id) continue;

          const diff = Math.abs(t1.score - t2.score);
          if (diff < minDiff) {
            minDiff = diff;
            bestOpponent = { team: t2.team, diff };
          }
        }
      }

      if (bestOpponent) {
        matches.push({
          id: `match-mixed-${Date.now()}-${Math.random().toString(36).slice(2, 9)}`,
          team1: t1.team,
          team2: bestOpponent.team,
          court: (matches.length % numberOfCourts) + 1
        });
        [t1.team.player1.id, t1.team.player2.id, bestOpponent.team.player1.id, bestOpponent.team.player2.id].forEach(id => used.add(id));
        counts[t1.team.player1.id]++;
        counts[t1.team.player2.id]++;
        counts[bestOpponent.team.player1.id]++;
        counts[bestOpponent.team.player2.id]++;
      }
    }

    // append matches from this attempt
    for (const m of matches) {
      result.push(m);
    }

    attempts++;
  }

  // ÏµúÏö∞ÏÑ†: 0Ìöå Í≤ΩÍ∏∞ ÏÑ†ÏàòÎ•º Ï†àÎåÄ ÎÇ®Í∏∞ÏßÄ ÏïäÏùå (Ï†úÌïú ÏóÜÏùå)
  let zeroAttempts = 0;
  const maxZeroAttempts = Math.max(50, players.length * 3);
  
  while (players.some(p => counts[p.id] === 0) && zeroAttempts < maxZeroAttempts) {
    const zeroGamePlayers = players.filter(p => counts[p.id] === 0)
      .sort((a, b) => {
        const aIsMale = isMale(a) ? 0 : 1;
        const bIsMale = isMale(b) ? 0 : 1;
        return aIsMale - bIsMale;
      });
    
    if (zeroGamePlayers.length === 0) break;
    
    console.warn(`‚ö†Ô∏è ÌòºÌï©Î≥µÏãù - 0Ìöå Í≤ΩÍ∏∞ ÏÑ†Ïàò Î∞úÍ≤¨: ${zeroGamePlayers.length}Î™Ö`);
    console.warn(`   ÏÑ†Ïàò: ${zeroGamePlayers.slice(0, 5).map(p => `${p.name}(${p.skill_level})`).join(', ')}${zeroGamePlayers.length > 5 ? '...' : ''}`);
    
    // 0Ìöå ÏÑ†Ïàò Ï§ë Ï≤´ 2Î™Ö + Í≤ΩÍ∏∞ Ïàò Ï†ÅÏùÄ Îã§Î•∏ ÏÑ†Ïàò 2Î™ÖÏúºÎ°ú Íµ¨ÏÑ±
    const picks: Player[] = [];
    
    // 0Ìöå ÏÑ†Ïàò ÏµúÎåÄ 2Î™Ö Ìè¨Ìï®
    picks.push(zeroGamePlayers[0]);
    if (zeroGamePlayers.length > 1) picks.push(zeroGamePlayers[1]);
    
    // ÎÇòÎ®∏ÏßÄÎäî Í≤ΩÍ∏∞ ÏàòÍ∞Ä Ï†ÅÏùÄ Îã§Î•∏ ÏÑ†ÏàòÎ°ú Ï±ÑÏö∞Í∏∞
    const others = players
      .filter(p => !picks.find(x => x.id === p.id))
      .sort((a, b) => {
        const countDiff = counts[a.id] - counts[b.id];
        if (countDiff !== 0) return countDiff;
        return Math.random() - 0.5;
      });
    
    for (const p of others) {
      if (picks.length < 4) picks.push(p);
    }
    
    if (picks.length < 4) {
      console.warn('‚ö†Ô∏è ÌòºÌï©Î≥µÏãù - 0Ìöå ÏÑ†Ïàò Îß§Ïπ≠ Ïã§Ìå®: 4Î™Ö ÎØ∏Îßå');
      break;
    }
    
    // ÌòºÌï©Î≥µÏãù Ïö∞ÏÑ†, ÏïàÎêòÎ©¥ ÎèôÏÑ± Î≥µÏãù
    const malesP = picks.filter(isMale);
    const femalesP = picks.filter(isFemale);
    let t1: Team | null = null;
    let t2: Team | null = null;
    
    if (malesP.length >= 2 && femalesP.length >= 2) {
      t1 = { player1: malesP[0], player2: femalesP[0] };
      t2 = { player1: malesP[1], player2: femalesP[1] };
    } else {
      const pairing = bestBalancedPairs(picks);
      if (!pairing) {
        console.warn('‚ö†Ô∏è ÌòºÌï©Î≥µÏãù - 0Ìöå ÏÑ†Ïàò ÌéòÏñ¥ÎßÅ Ïã§Ìå®');
        zeroAttempts++;
        continue;
      }
      t1 = pairing.t1;
      t2 = pairing.t2;
    }
    
    if (!t1 || !t2) {
      console.warn('‚ö†Ô∏è ÌòºÌï©Î≥µÏãù - 0Ìöå ÏÑ†Ïàò ÌåÄ Íµ¨ÏÑ± Ïã§Ìå®');
      zeroAttempts++;
      continue;
    }
    
    result.push({ 
      id: `match-mixed-zero-cover-${Date.now()}-${Math.random().toString(36).slice(2, 8)}`, 
      team1: t1, 
      team2: t2, 
      court: (result.length % numberOfCourts) + 1 
    });
    
    [t1.player1.id, t1.player2.id, t2.player1.id, t2.player2.id].forEach(id => {
      counts[id] = (counts[id] || 0) + 1;
    });
    
    zeroAttempts++;
  }
  
  // ‚úÖ Î™®Îì† ÏÑ†ÏàòÍ∞Ä ÏµúÏÜå 1Ìöå Ï∞∏Ïó¨ÌñàÎäîÏßÄ ÏµúÏ¢Ö ÌôïÏù∏
  const stillZero = players.filter(p => counts[p.id] === 0);
  if (stillZero.length > 0) {
    console.error(`‚ùå Ïó¨Ï†ÑÌûà 0Ìöå ÏÑ†Ïàò Î∞úÍ≤¨: ${stillZero.length}Î™Ö ‚Üí Í∞ïÏ†ú Ìè¨Ìï® Ï≤òÎ¶¨`);
    
    for (const zeroPlayer of stillZero) {
      const partners = players
        .filter(p => p.id !== zeroPlayer.id)
        .sort((a, b) => (counts[b.id] || 0) - (counts[a.id] || 0))
        .slice(0, 2);
      
      if (partners.length < 2) {
        console.warn(`‚ö†Ô∏è ÌòºÌï©Î≥µÏãù - 0Ìöå ÏÑ†Ïàò ${zeroPlayer.name} Í∞ïÏ†ú Ìè¨Ìï® Ïã§Ìå®: ÌååÌä∏ÎÑà Î∂ÄÏ°±`);
        continue;
      }
      
      const byCount = [...partners].sort((a, b) => (counts[b.id] || 0) - (counts[a.id] || 0));
      
      let t1: Team | null = null;
      let t2: Team | null = null;
      const picks = [zeroPlayer, byCount[0], byCount[1], players[0]];
      const malesP = picks.filter(isMale);
      const femalesP = picks.filter(isFemale);
      
      if (malesP.length >= 2 && femalesP.length >= 2) {
        t1 = { player1: malesP[0], player2: femalesP[0] };
        t2 = { player1: malesP[1], player2: femalesP[1] };
      } else {
        const pairing = bestBalancedPairs(picks);
        if (pairing) {
          t1 = pairing.t1;
          t2 = pairing.t2;
        }
      }
      
      if (t1 && t2) {
        result.push({
          id: `match-mixed-final-rescue-${Date.now()}-${Math.random().toString(36).slice(2, 8)}`,
          team1: t1,
          team2: t2,
          court: (result.length % numberOfCourts) + 1
        });
        counts[zeroPlayer.id]++;
      }
    }
  }

  // ÏµúÏ¢Ö Í≤ÄÏ¶ù Î∞è ÏÉÅÏÑ∏ Î°úÍπÖ
  const finalMissing = players.filter(p => counts[p.id] < minGamesPerPlayer);
  const zeroGames = players.filter(p => counts[p.id] === 0);
  
  console.log('‚úÖ ÌòºÌï©Î≥µÏãù Í≤ΩÍ∏∞ ÏÉùÏÑ± ÏôÑÎ£å:');
  console.log(`  - ÏÉùÏÑ±Îêú Í≤ΩÍ∏∞: ${result.length}Í∞ú`);
  console.log(`  - Ï∞∏Í∞ÄÌïú ÏÑ†Ïàò: ${players.filter(p => counts[p.id] > 0).length}Î™Ö / ${players.length}Î™Ö`);
  
  // Í≤ΩÍ∏∞ Ïàò Î∂ÑÌè¨
  const distribution: Record<number, number> = {};
  players.forEach(p => {
    const count = counts[p.id] || 0;
    distribution[count] = (distribution[count] || 0) + 1;
  });
  console.log('  - Í≤ΩÍ∏∞ Ïàò Î∂ÑÌè¨:', distribution);
  
  // ÏµúÏ¢Ö Í≤ÄÏ¶ù
  if (zeroGames.length > 0) {
    console.error(`‚ùå ÏπòÎ™ÖÏ†Å: ${zeroGames.length}Î™ÖÏù¥ Í≤ΩÍ∏∞Ïóê Ìïú Î≤àÎèÑ Ï∞∏Ïó¨ÌïòÏßÄ Î™ªÌï®!`);
    console.error(`   ÏÑ†Ïàò: ${zeroGames.map(p => `${p.name}(${p.skill_level})`).join(', ')}`);
  } else {
    console.log(`‚úÖ Î™®Îì† ÏÑ†Ïàò Ï∞∏Ïó¨ ÏôÑÎ£å!`);
  }
  
  if (finalMissing.length > 0) {
    console.warn(`‚ö†Ô∏è ${finalMissing.length}Î™ÖÏù¥ Î™©Ìëú ${minGamesPerPlayer}Ìöå ÎØ∏Îã¨:`);
    finalMissing.forEach(p => {
      console.warn(`   - ${p.name}(${p.skill_level}): ${counts[p.id] || 0}Ìöå`);
    });
  }

  return reorderMatchesToAvoidConsecutive(result);
}
