"use client";
import React, { useEffect, useState } from 'react';
import { supabase } from '@/lib/supabase';
import { Player, Match } from '@/types';
import { createMixedDoublesMatches } from '@/utils/match-utils';
import MatchTable from './MatchTable';
import PlayerGameCountsTable from './PlayerGameCountsTable';

/**
 * 선수를 랜덤으로 섞는 함수 (Fisher-Yates Shuffle 알고리즘)
 * @param array - 섞을 배열
 */
function shuffle<T>(array: T[]): T[] {
  const newArray = [...array];
  for (let i = newArray.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [newArray[i], newArray[j]] = [newArray[j], newArray[i]];
  }
  return newArray;
}

export default function PlayersPage() {
  // 프로필 테이블에서 참가 선수(이름+레벨+레벨코드) 목록 불러오기
  const [todayPlayers, setTodayPlayers] = useState<Player[]>([]);
  const LEVEL_LABELS: Record<string, string> = {
    a: '랍스터',
    b: 'B (상)',
    c: 'C (중)',
    d: 'D (하)',
    e: 'E (초보)',
    n: 'N (미지정)',
  };

  function normalizeLevel(skill_code: string | null | undefined, skill_level?: string | null | undefined): string {
    const code = (skill_code || '').toLowerCase();
    if (code) {
      if (code.startsWith('a')) return 'a';
      if (code.startsWith('b')) return 'b';
      if (code.startsWith('c')) return 'c';
      if (code.startsWith('d')) return 'd';
      if (code.startsWith('e')) return 'e';
      return code;
    }
    const level = (skill_level || '').toLowerCase();
    if (["a","b","c","d","e"].includes(level)) return level;
    return "n";
  }

  useEffect(() => {
    async function fetchPlayers() {
      const today = new Date().toISOString().slice(0, 10);
      console.log("Fetching attendance data for date:", today);
      
      const { data, error } = await supabase
        .from('attendances')
        .select(`
          user_id, 
          profiles(
            id, 
            username,
            full_name,
            gender, 
            skill_level
          )
        `)
        .eq('attended_at', today);
        
      if (error) {
        alert('출석자 조회 오류: ' + error.message);
        setTodayPlayers([]);
        return;
      }
      
      if (!data || data.length === 0) {
        console.log("No attendance data found for today");
        setTodayPlayers([]);
        return;
      }
      
      console.log("Attendance data:", data);
      
      // 사용자 정보와 레벨 정보를 별도로 가져오기
      const userIds = data.map(a => a.user_id).filter(Boolean);
      const { data: profilesData, error: profilesError } = await supabase
        .from('profiles')
        .select(`
          id, 
          username, 
          full_name,
          skill_level, 
          gender
        `)
        .in('id', userIds);
        
      if (profilesError) {
        console.error("Error fetching profiles:", profilesError);
      }
      
      console.log("Profiles data:", profilesData);
      
      // 레벨 정보 가져오기 
      const { data: levelData, error: levelError } = await supabase
        .from('level_info')
        .select('code, name');
        
      if (levelError) {
        console.error("Error fetching level info:", levelError);
      }
      
      console.log("Level info data:", levelData);
      
      // 레벨 정보를 객체로 변환
      const levelMap: Record<string, string> = {};
      if (levelData) {
        levelData.forEach((level: any) => {
          if (level.code) {
            levelMap[level.code.toLowerCase()] = level.name || '';
          }
        });
      }
      console.log("Level map:", levelMap);
      
      if (data) {
        const players = data
          .map((a: any) => {
            const profile = a.profiles || {};
            // 디버깅용 로그
            console.log('Raw profile data:', profile);
            
            // 이름이 없는 경우 확인 (이게 중요한 문제)
            if (!profile.username) {
              console.warn('⚠️ NO USERNAME for profile:', profile);
            }
            
            let skill_code = '';
            let skill_level = '';
            let skill_label = '';
            
            // 해당 사용자의 추가 프로필 정보 찾기
            const extraProfile = profilesData?.find(p => p.id === (profile.id || a.user_id));
            if (extraProfile) {
              console.log("Found extra profile data:", extraProfile);
            }
            
            // level_info가 있는 경우
            if (profile.level_info) {
              console.log('Level info exists for', profile.username, profile.level_info);
              
              // code가 있으면 skill_code와 skill_level에 설정
              if (profile.level_info.code) {
                skill_code = String(profile.level_info.code).toLowerCase();
                skill_level = skill_code;
              } 
              // code가 없고 profile.skill_level이 있으면 그걸 사용
              else if (profile.skill_level) {
                skill_level = String(profile.skill_level).toLowerCase();
              } 
              // 둘 다 없으면 'n'으로 설정
              else {
                skill_level = 'n';
              }
                
                // level_info.name이 있으면 한글 레벨명으로 사용
                if (profile.level_info.name) {
                  skill_label = profile.level_info.name;
                  console.log('Using level_info.name for', profile.username, skill_label);
                }
              } 
              // level_info가 없는 경우
              else {
                skill_level = profile.skill_level ? String(profile.skill_level).toLowerCase() : 'n';
                console.log('No level_info for', profile.username, 'using skill_level:', skill_level);
                
                // levelMap에서 해당 스킬 레벨에 맞는 레이블 찾기
                if (levelMap[skill_level]) {
                  skill_label = levelMap[skill_level];
                  console.log('Found level label in levelMap:', skill_level, skill_label);
                }
              }
              
              // skill_label이 없으면 LEVEL_LABELS에서 해당 코드로 가져옴
              if (!skill_label) {
                const normalizedLevel = normalizeLevel(skill_code, skill_level);
                skill_label = LEVEL_LABELS[normalizedLevel] || 'N (미지정)';
                console.log('Setting skill_label for', profile.username, 'to', skill_label, 'from level', skill_level);
              }
              // 추가 프로필 정보에서 이름 확인
              const extraName = extraProfile?.username || extraProfile?.full_name || '';
              
              // 이름 우선순위: 1) profile.username, 2) extraProfile name, 3) UUID 짧은 버전
              const playerName = profile.username || extraName || `선수-${(a.user_id || '').substring(0, 4)}`;
              
              console.log(`Final player info - ID: ${profile.id || a.user_id}, Name: ${playerName}, Level: ${skill_level}, Label: ${skill_label}`);
              
              return {
                id: profile.id || a.user_id,
                name: playerName,
                skill_level,
                skill_label,
                gender: profile.gender || extraProfile?.gender || '',
                skill_code,
              };
            })
            .filter((p: any) => p.id);
            
            setTodayPlayers(players);
        }
      }
    
    // 컴포넌트 마운트 시 선수 데이터 가져오기
    fetchPlayers();
  }, []);
  
  // 1인당 최소 게임수로 명칭 변경
  const [perPlayerMinGames, setPerPlayerMinGames] = useState(1);
  const [matches, setMatches] = useState<Match[]>([]);
  const [playerGameCounts, setPlayerGameCounts] = useState<Record<string, number>>({});
  const [myUserId, setMyUserId] = useState<string | null>(null);
  useEffect(() => {
    async function fetchUserId() {
      const { data } = await supabase.auth.getUser();
      if (data?.user?.id) setMyUserId(data.user.id);
    }
    fetchUserId();
  }, []);

  // 랜덤 방식 게임 배정 함수
  function assignMatchesRandomly() {
    // 모든 필요한 정보(id, name, skill_level, skill_label)를 포함하여 매핑
    if (!todayPlayers.length) return;
    
    const players = todayPlayers.map((player) => ({ 
      id: player.id, 
      name: player.name, 
      skill_level: player.skill_level,
      skill_label: player.skill_label, 
      skill_code: player.skill_code,
      gender: player.gender 
    }));
    if (players.length < 4) {
      setMatches([]);
      setPlayerGameCounts({});
      return;
    }
    function getAllTeams(pls: typeof players) {
      const teams: any[] = [];
      for (let i = 0; i < pls.length - 1; i++) {
        for (let j = i + 1; j < pls.length; j++) {
          teams.push({ player1: pls[i], player2: pls[j] });
        }
      }
      return teams;
    }
    function getAllMatches(teams: any[]): Match[] {
      const matches: Match[] = [];
      for (let i = 0; i < teams.length - 1; i++) {
        for (let j = i + 1; j < teams.length; j++) {
          const ids = [teams[i].player1.id, teams[i].player2.id, teams[j].player1.id, teams[j].player2.id];
          const unique = new Set(ids);
          if (unique.size === 4) {
            matches.push({ 
              id: `match_${Date.now()}_${i}_${j}`, // 고유 ID 추가
              court: 0, 
              team1: teams[i], 
              team2: teams[j] 
            });
          }
        }
      }
      return matches;
    }
    const allTeams = getAllTeams(players);
    let allMatches = getAllMatches(allTeams);
    allMatches = shuffle(allMatches);
    const assignedMatches: Match[] = [];
    const playerGameCounts: Record<string, number> = {};
    players.forEach(p => { playerGameCounts[p.id] = 0; });
    // 모든 출석자가 최소 perPlayerMinGames번 이상 경기에 포함될 때까지 배정
    for (const m of allMatches) {
      const ids = [m.team1.player1.id, m.team1.player2.id, m.team2.player1.id, m.team2.player2.id];
      const minGames = Math.min(...Object.values(playerGameCounts));
      if (minGames >= perPlayerMinGames) break;
      const tempCounts = { ...playerGameCounts };
      ids.forEach(id => tempCounts[id]++);
      const countsArr = Object.values(tempCounts);
      const min = Math.min(...countsArr);
      const max = Math.max(...countsArr);
      if (max - min <= 1) {
        assignedMatches.push(m);
        ids.forEach(id => playerGameCounts[id]++);
      }
    }
    assignedMatches.forEach((m, idx) => { m.court = (idx % Math.max(1, Math.floor(assignedMatches.length / 2)) + 1); });
    setMatches(assignedMatches);
    setPlayerGameCounts(playerGameCounts);
  }
  // 레벨 코드 순서대로 4명씩 게임 배정 함수
  function assignMatchesByLevelOrder() {
    // 모든 필요한 정보를 포함한 선수 목록
    const sortedPlayers = [...todayPlayers].sort((a, b) => {
      const codeA = (a.skill_code || a.skill_level || 'n').toLowerCase();
      const codeB = (b.skill_code || b.skill_level || 'n').toLowerCase();
      const alphaA = codeA.replace(/[^a-z]/g, '');
      const alphaB = codeB.replace(/[^a-z]/g, '');
      if (alphaA !== alphaB) return alphaA.localeCompare(alphaB);
      const numA = parseInt(codeA.replace(/[^0-9]/g, '')) || 0;
      const numB = parseInt(codeB.replace(/[^0-9]/g, '')) || 0;
      return numA - numB;
    });
    const matches: Match[] = [];
    const playerGameCounts: Record<string, number> = {};
    sortedPlayers.forEach(p => { playerGameCounts[p.id] = 0; });
    let idx = 0;
    while (true) {
      let found = false;
      for (; idx + 3 < sortedPlayers.length; idx += 4) {
        const group = [sortedPlayers[idx], sortedPlayers[idx+1], sortedPlayers[idx+2], sortedPlayers[idx+3]];
        if (group.every(p => playerGameCounts[p.id] >= perPlayerMinGames)) continue;
        const team1 = { player1: group[0], player2: group[2] };
        const team2 = { player1: group[1], player2: group[3] };
        matches.push({ 
          id: `match_${Date.now()}_${matches.length}`,  // 고유 ID 추가
          court: matches.length + 1, 
          team1, 
          team2 
        });
        [group[0].id, group[1].id, group[2].id, group[3].id].forEach(id => playerGameCounts[id]++);
        found = true;
      }
      const remain = sortedPlayers.slice(idx).filter(p => playerGameCounts[p.id] < perPlayerMinGames);
      if (remain.length > 0 && remain.length < 4) {
        const mainLevel = remain[0]?.skill_code || remain[0]?.skill_level || 'n';
        const sameLevel = sortedPlayers.filter(p => ((p.skill_code || p.skill_level || 'n') === mainLevel));
        let fill = [...remain];
        if (fill.length < 4) {
          const recentMatches = matches.slice(-2);
          const recentPairs = new Set<string>();
          recentMatches.forEach(m => {
            const ids = [m.team1.player1.id, m.team1.player2.id, m.team2.player1.id, m.team2.player2.id];
            for (let i = 0; i < ids.length; i++) {
              for (let j = i + 1; j < ids.length; j++) {
                recentPairs.add([ids[i], ids[j]].sort().join('-'));
              }
            }
          });
          const fillIds = fill.map(f => f.id);
          const candidate = sameLevel.filter(p => !fillIds.includes(p.id) && fill.every(f => !recentPairs.has([f.id, p.id].sort().join('-'))));
          for (const p of candidate) {
            if (fill.length < 4) fill.push(p);
          }
        }
        if (fill.length < 4) {
          const recentMatches = matches.slice(-2);
          const recentIds = new Set<string>();
          recentMatches.forEach(m => {
            [m.team1.player1, m.team1.player2, m.team2.player1, m.team2.player2].forEach(p => {
              const orig = todayPlayers.find(tp => tp.id === p.id);
              if ((orig?.skill_code || orig?.skill_level || 'n') === mainLevel) recentIds.add(p.id);
            });
          });
          const recentFill = sameLevel.filter(p => recentIds.has(p.id) && !fill.find(f => f.id === p.id));
          for (const p of recentFill) {
            if (fill.length < 4) fill.push(p);
          }
        }
        if (fill.length < 4) {
          const others = sameLevel.filter(p => !fill.find(f => f.id === p.id));
          while (fill.length < 4 && others.length > 0) {
            const pickIdx = Math.floor(Math.random() * others.length);
            fill.push(others.splice(pickIdx, 1)[0]);
          }
        }
        if (fill.length === 4) {
          const team1 = { player1: fill[0], player2: fill[2] };
          const team2 = { player1: fill[1], player2: fill[3] };
          matches.push({ 
            id: `match_${Date.now()}_${matches.length}`, // 고유 ID 추가
            court: matches.length + 1, 
            team1, 
            team2 
          });
          fill.forEach(p => playerGameCounts[p.id]++);
          found = true;
        }
      }
      if (!found || Object.values(playerGameCounts).every(cnt => cnt >= perPlayerMinGames)) break;
      idx = 0;
    }
    setMatches(matches);
    setPlayerGameCounts(playerGameCounts);
  }
  // 핸들러 함수 (버튼에서 호출)
  const handleGenerateMatches = () => {
    assignMatchesRandomly();
  };
  const handleAssignByLevel = () => {
    assignMatchesByLevelOrder();
  };
  const handleAssignMixedDoubles = () => {
    // 모든 필요한 정보를 포함
    const players = todayPlayers.map(({ id, name, skill_level, skill_label, skill_code, gender }) => ({ 
      id, 
      name, 
      skill_level,
      skill_label,
      skill_code, 
      gender 
    }));
    const matches = createMixedDoublesMatches(players, 2);
    setMatches(matches);
    setPlayerGameCounts({});
  };
  // 1. 함수 추가 (PlayersPage 함수 안에 선언해도 되고, 바깥에 선언해도 됨)
  async function saveMatchResult({ userId, matchNo, win, score }: { userId: string, matchNo: number, win: boolean, score: string }) {
    const today = new Date().toISOString().slice(0, 10);
    const { error } = await supabase
      .from('match_result')
      .upsert(
        {
          user_id: userId,
          attended_at: today,
          match_no: matchNo,
          win,
          score,
        },
        { onConflict: 'user_id,attended_at,match_no' }
      );
    if (error) alert('저장 실패: ' + error.message);
    else alert('저장 완료!');
  }
  return (
    <div className="max-w-lg mx-auto mt-10 p-6 bg-white shadow rounded">
      <h2 className="text-2xl font-bold mb-4 text-center">참가 선수 및 경기 생성</h2>
      {/* 레벨별 출석자 수 요약 (레벨명 기준 그룹화) */}
      <div className="mb-6">
        <span className="font-semibold">오늘 출석자: </span>
        <span className="text-blue-600 font-bold">{todayPlayers.length}명</span>
        <div className="mt-2 text-sm flex flex-wrap gap-2">
          {(() => {
            // skill_label(한글명) 기준으로 합산
            const labelMap: Record<string, number> = {};
            todayPlayers.forEach(p => {
              // console.log('Player level info:', p.name, p.skill_level, p.skill_label, p.skill_code);
              const label = p.skill_label || LEVEL_LABELS[p.skill_level] || 'N (미지정)';
              if (!labelMap[label]) labelMap[label] = 0;
              labelMap[label]++;
            });
            // 디버깅용 로그
            // console.log('Label Map:', labelMap);
            const labelOrder = Object.keys(labelMap).sort();
            return labelOrder.map(label => (
              <span key={label} className="mr-4 flex items-center">
                <span className="font-medium">{label}:</span> {labelMap[label]}명
              </span>
            ));
          })()}
        </div>
      </div>
      {/* 회원별 게임수 요약 (상단 요약 제거, 하단 표로 이동) */}

      {/* 1인당 최소 게임 수 입력 */}
      <div className="mb-4 flex items-center gap-2">
        <label className="mr-2">1인당 최소 게임수:</label>
        <input
          type="number"
          value={perPlayerMinGames}
          min={1}
          onChange={(e) => setPerPlayerMinGames(Number(e.target.value))}
          className="border p-1 rounded w-16"
        />
      </div>

      {/* 버튼 컨테이너: 혼복 오른쪽 끝, 나머지 가운데 */}
      <div className="flex justify-between items-center mb-4 space-x-2">
        {/* 레벨, 랜덤 버튼 */}
        <div className="flex space-x-2">
          <button
            className="bg-green-500 text-white px-4 py-2 rounded transition-colors cursor-pointer hover:bg-green-600 disabled:opacity-50 disabled:cursor-not-allowed text-sm"
            onClick={handleAssignByLevel}
            disabled={todayPlayers.length < 4}
            type="button"
          >레벨</button>
          <button
            className="bg-blue-500 text-white px-4 py-2 rounded transition-colors cursor-pointer hover:bg-blue-600 disabled:opacity-50 disabled:cursor-not-allowed text-sm"
            onClick={handleGenerateMatches}
            disabled={todayPlayers.length < 4}
            type="button"
          >랜덤</button>
        </div>
        {/* 혼복 버튼 */}
        <button
          className="bg-yellow-500 text-white px-4 py-2 rounded transition-colors cursor-pointer hover:bg-yellow-600 disabled:opacity-50 disabled:cursor-not-allowed text-sm"
          onClick={handleAssignMixedDoubles}
          disabled={todayPlayers.length < 4}
          type="button"
        >혼복</button>
      </div>
      {/* 경기 결과 테이블 */}
      {matches.length > 0 && (
        <MatchTable
          matches={matches}
          todayPlayers={todayPlayers}
          myUserId={myUserId}
        />
      )}

      {/* 회원별 게임수 표 */}
      {Object.keys(playerGameCounts).length > 0 && (
        <PlayerGameCountsTable
          todayPlayers={todayPlayers}
          playerGameCounts={playerGameCounts}
          myUserId={myUserId}
          matches={matches}
        />
      )}

      {/* 본인 경기만 별도 표시 */}
      {myUserId && matches.length > 0 && (
        <div className="mb-2">
          <h4 className="font-semibold mb-1">내 경기 목록</h4>
          <ul className="text-sm space-y-1">
            {matches.map((m, idx) => {
              const isMine = [m.team1.player1.id, m.team1.player2.id, m.team2.player1.id, m.team2.player2.id].includes(myUserId);
              if (!isMine) return null;
              const getPlayerLabel = (player: Player) => {
                const getShortLabel = (label: string) => (label ? label[0] : '');
                
                // 이미 player 객체에 이름이 있으면 그대로 사용
                if (player && player.name) {
                  const shortLabel = player.skill_label ? getShortLabel(player.skill_label) : 
                                    player.skill_code ? getShortLabel(player.skill_code) : 
                                    player.skill_level ? getShortLabel(player.skill_level) : '';
                  
                  return shortLabel ? `${player.name}(${shortLabel})` : player.name;
                }
                
                // todayPlayers에서 해당 ID로 검색
                const p = todayPlayers.find(tp => String(tp.id).trim() === String(player.id).trim());
                if (p && p.name) {
                  const shortLabel = p.skill_label ? getShortLabel(p.skill_label) : 
                                    p.skill_code ? getShortLabel(p.skill_code) : 
                                    p.skill_level ? getShortLabel(p.skill_level) : '';
                  
                  return shortLabel ? `${p.name}(${shortLabel})` : p.name;
                }
                
                // 정보가 없는 경우 ID 반환 (fallback)
                return `선수-${player.id.substring(0, 4)}`;
              };
              return (
                <li key={`my-match-${idx}`} className="bg-blue-100 rounded px-2 py-1">
                  <span className="font-medium">경기 코드:</span> <span className="text-blue-700 font-mono">{m.court}</span> <span className="mx-2">|</span>
                  <span className="font-medium">팀1:</span> {getPlayerLabel(m.team1.player1)} / {getPlayerLabel(m.team1.player2)} <span className="mx-2">|</span>
                  <span className="font-medium">팀2:</span> {getPlayerLabel(m.team2.player1)} / {getPlayerLabel(m.team2.player2)}
                </li>
              );
            })}
          </ul>
        </div>
      )}
    </div>
  );
}
